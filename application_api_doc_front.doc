# Документация по API для фронта (Application, drag-and-drop и таблица)

## Application (Заявка/Карточка)

### Получить список заявок
GET /api/applications/
Ответ:
[
  {
    "id": 1,
    "name": "Заявка 1",
    "contact": "mail@mail.com",
    "stage": "new",        // этап: new, in_progress, done
    "is_done": false
  }
]

### Создать новую заявку
POST /api/applications/
Тело запроса:
{
  "name": "Заявка 2",
  "contact": "contact@mail.com",
  "stage": "new",         // или "in_progress", "done"
  "is_done": false
}
Ответ: созданный объект Application

### Получить детали заявки
GET /api/applications/{id}/
Ответ:
{
  "id": 1,
  "name": "Заявка 1",
  "contact": "mail@mail.com",
  "stage": "new",
  "is_done": false
}

### Обновить заявку (например, drag-and-drop между этапами)
PATCH /api/applications/{id}/
Тело запроса:
{
  "stage": "in_progress"   // новое значение этапа
}
Ответ: обновлённый объект Application

### Удалить заявку
DELETE /api/applications/{id}/
Ответ: 204 No Content

---

## Использование на фронте

- Для drag-and-drop используйте поле `stage` как колонку.
- Для таблицы выводите все поля: id, name, contact, stage, is_done.
- Для добавления вручную используйте POST с нужными полями.
- Для редактирования — PATCH/PUT, для удаления — DELETE.

### Пример drag-and-drop (смена этапа)
PATCH /api/applications/1/
Тело:
{
  "stage": "done"
}

---

## Возможные значения поля stage
- "new" — Новая
- "in_progress" — В работе
- "done" — Завершена

---

# Инструкция для Next.js по реализации drag-and-drop kanban CRM

## 1. Получение данных для доски
- Запрос: `GET /api/board/`
- Ответ:
[
  {
    "id": 1,
    "name": "Этап-1",
    "applications": {
      "new": [{ "id": 101, "name": "Иванов Иван", "contact": "+998..." }, ...],
      "in_progress": [{ ... }],
      "done": [{ ... }]
    }
  },
  ...
]

## 2. Отображение этапов и колонок
- Сверху — этапы (воронки), как вкладки.
- Внутри этапа — три колонки: "Новая", "В работе", "Завершён".
- В каждой колонке — карточки заявок (name, contact).

## 3. Drag-and-drop
- Используйте библиотеку `react-beautiful-dnd` или аналог.
- При перетаскивании карточки между статусами:
  - Отправьте PATCH:
```js
await fetch(`/api/applications/${appId}/`, {
  method: 'PATCH',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ status: newStatus })
});
```
- После успешного ответа — обновите данные (повторный fetch `/api/board/`).

## 4. Переключение этапов
- При клике на этап — показывайте `board[index].applications`.

## 5. Пример компонента карточки
```jsx
<Card>
  <div>{app.name}</div>
  <div>{app.contact}</div>
</Card>
```

## 6. Пример PATCH для смены этапа
```js
await fetch(`/api/applications/${appId}/`, {
  method: 'PATCH',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ varonka: newVaronkaId })
});
```

## 7. Рекомендация
- Храните board в useState, обновляйте после каждого действия.
- Для drag-and-drop используйте onDragEnd, чтобы отправлять PATCH и обновлять доску.

---

# API для задач клиентов (ApplicationTaskCompletion, dnd-канбан)

## Получить задачи клиента
GET /application-task-completions/?application={application_id}
Ответ:
[
  {
    "id": 123,
    "task": 5,
    "task_name": "Позвонить клиенту",
    "status": "in_progress",
    "completed_at": "2025-09-02T12:34:56Z",
    "notes": "",
    "completed_by": "Менеджер"
  },
  ...
]

## Изменить статус задачи (dnd)
PATCH /application-task-completions/{id}/
{
  "status": "in_progress" // или "done", "new"
}
Ответ: обновленная задача.

## Список статусов для dnd
- "new" — Новая
- "in_progress" — В работе
- "done" — Завершена

## Пример PATCH запроса для dnd
PATCH /application-task-completions/123/
{
  "status": "done"
}

## Примечания
- Для получения задач конкретного клиента используйте параметр `application`.
- Для обновления статуса задачи используйте PATCH с нужным статусом.
- Все задачи клиента доступны через endpoint `/application-task-completions/`.

